#include <iostream>
#include <vector>
using namespace std;

class MinHeap {
    vector<int> heap;  // массив для хранения элементов кучи
public:
    // Вставка нового элемента в кучу
    void insert(int val) {
        heap.push_back(val);  // добавляем элемент в конец массива
        
        // Восстанавливаем свойство кучи: поднимаем элемент вверх
        // пока он меньше своего родителя
        for(int i = heap.size()-1; i > 0 && heap[i] < heap[(i-1)/2]; i = (i-1)/2)
            swap(heap[i], heap[(i-1)/2]);  // меняем местами с родителем
    }
    
    // Извлечение минимального элемента (корня)
    int extractMin() {
        int min = heap[0];  // сохраняем минимальный элемент (корень)
        heap[0] = heap.back();  // заменяем корень последним элементом
        heap.pop_back();  // удаляем последний элемент
        
        // Восстанавливаем свойство кучи: опускаем новый корень вниз
        int i = 0;
        while(2*i+1 < heap.size()) {  // пока есть хотя бы один потомок
            int child = 2*i+1;  // левый потомок
            
            // Если есть правый потомок и он меньше левого, выбираем его
            if(child+1 < heap.size() && heap[child+1] < heap[child]) 
                child++;
            
            // Если текущий элемент уже меньше потомков, выходим
            if(heap[i] <= heap[child]) 
                break;
                
            swap(heap[i], heap[child]);  // меняем местами с меньшим потомком
            i = child;  // переходим к следующему уровню
        }
        return min;  // возвращаем минимальный элемент
    }
};

int main() {
    MinHeap h;  // создаем min-кучу
    
    // Добавляем элементы в кучу
    h.insert(3); 
    h.insert(1); 
    h.insert(2);
    
    // Извлекаем и выводим минимальный элемент
    cout << h.extractMin(); // Выведет: 1
    
    return 0;
}
